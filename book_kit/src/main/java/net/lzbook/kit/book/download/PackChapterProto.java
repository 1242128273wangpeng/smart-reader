package net.lzbook.kit.book.download;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packChapter.proto

import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.Internal;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.UnknownFieldSet;

import java.io.InputStream;


public final class PackChapterProto {
    private PackChapterProto() {
    }

    public static void registerAllExtensions(
            ExtensionRegistry registry) {
    }

    public interface PackChapterOrBuilder
            extends MessageOrBuilder {

        // required string chapterId = 1;
        boolean hasChapterId();

        String getChapterId();

        // required int64 serialNumber = 2;
        boolean hasSerialNumber();

        long getSerialNumber();

        // required string chapterName = 3;
        boolean hasChapterName();

        String getChapterName();

        // optional string content = 4;
        boolean hasContent();

        String getContent();

        // required string host = 5;
        boolean hasHost();

        String getHost();
    }

    public static final class PackChapter extends GeneratedMessage implements PackChapterOrBuilder {
        // Use PackChapter.newBuilder() to construct.
        private PackChapter(Builder builder) {
            super(builder);
        }

        private PackChapter(boolean noInit) {
        }

        private static final PackChapter defaultInstance;

        public static PackChapter getDefaultInstance() {
            return defaultInstance;
        }

        public PackChapter getDefaultInstanceForType() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return PackChapterProto.internal_static_PackChapter_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return PackChapterProto.internal_static_PackChapter_fieldAccessorTable;
        }

        private int bitField0_;
        // required string chapterId = 1;
        public static final int CHAPTERID_FIELD_NUMBER = 1;
        private Object chapterId_;

        public boolean hasChapterId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        public String getChapterId() {
            Object ref = chapterId_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                ByteString bs = (ByteString) ref;
                String s = bs.toStringUtf8();
                if (Internal.isValidUtf8(bs)) {
                    chapterId_ = s;
                }
                return s;
            }
        }

        private ByteString getChapterIdBytes() {
            Object ref = chapterId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                chapterId_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        // required int64 serialNumber = 2;
        public static final int SERIALNUMBER_FIELD_NUMBER = 2;
        private long serialNumber_;

        public boolean hasSerialNumber() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        public long getSerialNumber() {
            return serialNumber_;
        }

        // required string chapterName = 3;
        public static final int CHAPTERNAME_FIELD_NUMBER = 3;
        private Object chapterName_;

        public boolean hasChapterName() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        public String getChapterName() {
            Object ref = chapterName_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                ByteString bs = (ByteString) ref;
                String s = bs.toStringUtf8();
                if (Internal.isValidUtf8(bs)) {
                    chapterName_ = s;
                }
                return s;
            }
        }

        private ByteString getChapterNameBytes() {
            Object ref = chapterName_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                chapterName_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        // optional string content = 4;
        public static final int CONTENT_FIELD_NUMBER = 4;
        private Object content_;

        public boolean hasContent() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        public String getContent() {
            Object ref = content_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                ByteString bs = (ByteString) ref;
                String s = bs.toStringUtf8();
                if (Internal.isValidUtf8(bs)) {
                    content_ = s;
                }
                return s;
            }
        }

        private ByteString getContentBytes() {
            Object ref = content_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                content_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        // required string host = 5;
        public static final int HOST_FIELD_NUMBER = 5;
        private Object host_;

        public boolean hasHost() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        public String getHost() {
            Object ref = host_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                ByteString bs = (ByteString) ref;
                String s = bs.toStringUtf8();
                if (Internal.isValidUtf8(bs)) {
                    host_ = s;
                }
                return s;
            }
        }

        private ByteString getHostBytes() {
            Object ref = host_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                host_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        private void initFields() {
            chapterId_ = "";
            serialNumber_ = 0L;
            chapterName_ = "";
            content_ = "";
            host_ = "";
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasChapterId()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasSerialNumber()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasChapterName()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasHost()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(1, getChapterIdBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt64(2, serialNumber_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeBytes(3, getChapterNameBytes());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeBytes(4, getContentBytes());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeBytes(5, getHostBytes());
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += CodedOutputStream.computeBytesSize(1, getChapterIdBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += CodedOutputStream.computeInt64Size(2, serialNumber_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += CodedOutputStream.computeBytesSize(3, getChapterNameBytes());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += CodedOutputStream.computeBytesSize(4, getContentBytes());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += CodedOutputStream.computeBytesSize(5, getHostBytes());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static PackChapter parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static PackChapter parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
        }

        public static PackChapter parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static PackChapter parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
        }

        public static PackChapter parseFrom(InputStream input) throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static PackChapter parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
        }

        public static PackChapter parseDelimitedFrom(InputStream input) throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static PackChapter parseDelimitedFrom(
                InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static PackChapter parseFrom(
                CodedInputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static PackChapter parseFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PackChapter prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(
                GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends
                GeneratedMessage.Builder<Builder>
                implements PackChapterOrBuilder {
            public static final Descriptors.Descriptor
            getDescriptor() {
                return PackChapterProto.internal_static_PackChapter_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return PackChapterProto.internal_static_PackChapter_fieldAccessorTable;
            }

            // Construct using PackChapterProto.PackChapter.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                chapterId_ = "";
                bitField0_ = (bitField0_ & ~0x00000001);
                serialNumber_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000002);
                chapterName_ = "";
                bitField0_ = (bitField0_ & ~0x00000004);
                content_ = "";
                bitField0_ = (bitField0_ & ~0x00000008);
                host_ = "";
                bitField0_ = (bitField0_ & ~0x00000010);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor
            getDescriptorForType() {
                return PackChapter.getDescriptor();
            }

            public PackChapter getDefaultInstanceForType() {
                return PackChapter.getDefaultInstance();
            }

            public PackChapter build() {
                PackChapter result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            private PackChapter buildParsed()
                    throws InvalidProtocolBufferException {
                PackChapter result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(
                            result).asInvalidProtocolBufferException();
                }
                return result;
            }

            public PackChapter buildPartial() {
                PackChapter result = new PackChapter(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.chapterId_ = chapterId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.serialNumber_ = serialNumber_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.chapterName_ = chapterName_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.content_ = content_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.host_ = host_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof PackChapter) {
                    return mergeFrom((PackChapter) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(PackChapter other) {
                if (other == PackChapter.getDefaultInstance()) return this;
                if (other.hasChapterId()) {
                    setChapterId(other.getChapterId());
                }
                if (other.hasSerialNumber()) {
                    setSerialNumber(other.getSerialNumber());
                }
                if (other.hasChapterName()) {
                    setChapterName(other.getChapterName());
                }
                if (other.hasContent()) {
                    setContent(other.getContent());
                }
                if (other.hasHost()) {
                    setHost(other.getHost());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasChapterId()) {

                    return false;
                }
                if (!hasSerialNumber()) {

                    return false;
                }
                if (!hasChapterName()) {

                    return false;
                }
                if (!hasHost()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    CodedInputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                UnknownFieldSet.Builder unknownFields =
                        UnknownFieldSet.newBuilder(
                                this.getUnknownFields());
                while (true) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            this.setUnknownFields(unknownFields.build());
                            onChanged();
                            return this;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                this.setUnknownFields(unknownFields.build());
                                onChanged();
                                return this;
                            }
                            break;
                        }
                        case 10: {
                            bitField0_ |= 0x00000001;
                            chapterId_ = input.readBytes();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            serialNumber_ = input.readInt64();
                            break;
                        }
                        case 26: {
                            bitField0_ |= 0x00000004;
                            chapterName_ = input.readBytes();
                            break;
                        }
                        case 34: {
                            bitField0_ |= 0x00000008;
                            content_ = input.readBytes();
                            break;
                        }
                        case 42: {
                            bitField0_ |= 0x00000010;
                            host_ = input.readBytes();
                            break;
                        }
                    }
                }
            }

            private int bitField0_;

            // required string chapterId = 1;
            private Object chapterId_ = "";

            public boolean hasChapterId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            public String getChapterId() {
                Object ref = chapterId_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) ref).toStringUtf8();
                    chapterId_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            public Builder setChapterId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                chapterId_ = value;
                onChanged();
                return this;
            }

            public Builder clearChapterId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                chapterId_ = getDefaultInstance().getChapterId();
                onChanged();
                return this;
            }

            void setChapterId(ByteString value) {
                bitField0_ |= 0x00000001;
                chapterId_ = value;
                onChanged();
            }

            // required int64 serialNumber = 2;
            private long serialNumber_;

            public boolean hasSerialNumber() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            public long getSerialNumber() {
                return serialNumber_;
            }

            public Builder setSerialNumber(long value) {
                bitField0_ |= 0x00000002;
                serialNumber_ = value;
                onChanged();
                return this;
            }

            public Builder clearSerialNumber() {
                bitField0_ = (bitField0_ & ~0x00000002);
                serialNumber_ = 0L;
                onChanged();
                return this;
            }

            // required string chapterName = 3;
            private Object chapterName_ = "";

            public boolean hasChapterName() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            public String getChapterName() {
                Object ref = chapterName_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) ref).toStringUtf8();
                    chapterName_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            public Builder setChapterName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                chapterName_ = value;
                onChanged();
                return this;
            }

            public Builder clearChapterName() {
                bitField0_ = (bitField0_ & ~0x00000004);
                chapterName_ = getDefaultInstance().getChapterName();
                onChanged();
                return this;
            }

            void setChapterName(ByteString value) {
                bitField0_ |= 0x00000004;
                chapterName_ = value;
                onChanged();
            }

            // optional string content = 4;
            private Object content_ = "";

            public boolean hasContent() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            public String getContent() {
                Object ref = content_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) ref).toStringUtf8();
                    content_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            public Builder setContent(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000008;
                content_ = value;
                onChanged();
                return this;
            }

            public Builder clearContent() {
                bitField0_ = (bitField0_ & ~0x00000008);
                content_ = getDefaultInstance().getContent();
                onChanged();
                return this;
            }

            void setContent(ByteString value) {
                bitField0_ |= 0x00000008;
                content_ = value;
                onChanged();
            }

            // required string host = 5;
            private Object host_ = "";

            public boolean hasHost() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            public String getHost() {
                Object ref = host_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) ref).toStringUtf8();
                    host_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            public Builder setHost(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000010;
                host_ = value;
                onChanged();
                return this;
            }

            public Builder clearHost() {
                bitField0_ = (bitField0_ & ~0x00000010);
                host_ = getDefaultInstance().getHost();
                onChanged();
                return this;
            }

            void setHost(ByteString value) {
                bitField0_ |= 0x00000010;
                host_ = value;
                onChanged();
            }

            // @@protoc_insertion_point(builder_scope:PackChapter)
        }

        static {
            defaultInstance = new PackChapter(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:PackChapter)
    }

    private static Descriptors.Descriptor
            internal_static_PackChapter_descriptor;
    private static
    GeneratedMessage.FieldAccessorTable
            internal_static_PackChapter_fieldAccessorTable;

    public static Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n\021packChapter.proto\"j\n\013PackChapter\022\021\n\tch" +
                        "apterId\030\001 \002(\t\022\024\n\014serialNumber\030\002 \002(\003\022\023\n\013c" +
                        "hapterName\030\003 \002(\t\022\017\n\007content\030\004 \001(\t\022\014\n\004hos" +
                        "t\030\005 \002(\tB\022B\020PackChapterProto"
        };
        Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public ExtensionRegistry assignDescriptors(
                            Descriptors.FileDescriptor root) {
                        descriptor = root;
                        internal_static_PackChapter_descriptor =
                                getDescriptor().getMessageTypes().get(0);
                        internal_static_PackChapter_fieldAccessorTable = new
                                GeneratedMessage.FieldAccessorTable(
                                internal_static_PackChapter_descriptor,
                                new String[]{"ChapterId", "SerialNumber", "ChapterName", "Content", "Host",},
                                PackChapter.class,
                                PackChapter.Builder.class);
                        return null;
                    }
                };
        Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new Descriptors.FileDescriptor[]{
                        }, assigner);
    }

    // @@protoc_insertion_point(outer_class_scope)
}
