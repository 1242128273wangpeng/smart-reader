
void log(def str){
    System.err.println("gradle: " + str)
}

ext {

    javaMaxHeapSize = '4G'

    compileSdkVersion = 27

    minSdkVersion = 14
    targetSdkVersion = 22

    applicationId = "cn.qbzsydsq.reader"
    defaultPublishConfig = 'qbzsydqDebug'

    minifyEnable = false
    shrinkResEnable = minifyEnable

    kotlin_version = '1.2.10'
    greendao_version = '3.2.2'
    support_version = '27.1.1'
    arouter_api_version = '1.3.1'
    arouter_compiler_version = '1.1.4'
    arch_version = '1.1.0'
    media_version = '1.6.002'

    hasad = true

    noadList = ['cn.txtqbmfyd.reader', 'cn.txtqbmfyd.reader']


    def appPackageIDConfig = [
            kdzsydq   : "cn.txtzsydsq.reader",
            qbzsydq   : "cn.qbzsydsq.reader",
            mfqbxssc  : "cc.kdqbxs.reader",
            zsmfqbxs  : "cc.mianfeinovel",
            txtqbmfxs : "cc.lianzainovel",
            qbmfxsydq : "cc.quanben.novel",
            txtqbdzs  : "cc.remennovel",
            kdqbdzs   : "cn.kkqbtxtxs.reader",
            txtqbxsydq: "cn.zsqbydq.reader",
            txtqbmfyd : "cn.txtqbmfyd.reader",
            qbmfkdxs  : "cc.quanbennovel",
            qbmfrmxs  : "cn.qbmfrmxs.reader"
    ]

    def startParameter = project.getGradle().getStartParameter()
    log(" = = = = = = = = = = = = = = = = = = = = = = = = ")
    log(startParameter)
    log(" = = = = = = = = = = = = = = = = = = = = = = = = ")
    log(project.getProperties())
    log(" = = = = = = = = = = = = = = = = = = = = = = = = ")

    if (!startParameter.taskRequests.isEmpty()) {
        def arg0 = startParameter.taskRequests[0].args[0]
        log(arg0)
        if(arg0.contains(":common_book:")) {
            def isDebug = arg0.contains("Debug")
            def app = arg0.replace(":common_book:", "")
                    .replace("generate", "")
                    .replace("assemble", "")
                    .replace("Debug", "")
                    .replace("Release", "")
                    .replace("Custom", "")
                    .replace("Sources", "").toLowerCase()
            log(app)
            if(!appPackageIDConfig.containsKey(app)){
                throw new RuntimeException("app not found: $app")
            }
            applicationId = appPackageIDConfig.get(app)
            if(isDebug) {
                defaultPublishConfig = app+"Debug"
            }else{
                defaultPublishConfig = app+"Release"
            }

            hasad = !noadList.contains(applicationId)

            log("applicationId: " + applicationId)
            log("defaultPublishConfig: " + defaultPublishConfig)
            log("hasad: " + hasad)
        }
    }

}